// This sets up the dependencies for the build script *itself*, not the package.
buildscript {
    // Work around a defect in the 'android-library' plugin's version check
    System.properties['com.android.build.gradle.overrideVersionCheck'] = 'true'

    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
        classpath 'com.github.dcendents:android-maven-plugin:1.2'
        classpath 'com.android.tools.build:gradle:1.3.0'
    }
}

apply plugin: 'android-library'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

version = '0.1.2'

// By default, only "src/" will be included, but we want to include the code
// from the "common" project as well -- and want it to be part of this JAR,
// not a separate artifact.
sourceSets {
    println "${android.sourceSets.main.java.srcDirs}"
}

task sourceSetProperties << {
	sourceSets {
		main {
			println "java.srcDirs = ${java.srcDirs}"
			println "resources.srcDirs = ${resources.srcDirs}"
			println "java.files = ${java.files.name}"
			println "allJava.files = ${allJava.files.name}"
			println "resources.files = ${resources.files.name}"
			println "allSource.files = ${allSource.files.name}"
			println "output.classesDir = ${output.classesDir}"
			println "output.resourcesDir = ${output.resourcesDir}"
			println "output.files = ${output.files}"
		}
	}
}

android {
    compileSdkVersion 23
    buildToolsVersion "21.0.1"

    defaultConfig {
         // If you change minSdkVersion or targetSdkVersion below, you must also change
         // the relevant attributes of the <uses-sdk> tag in AndroidManifest.xml
         minSdkVersion 9
         targetSdkVersion 23
         versionName version
         //testApplicationId "com.mixpanel.android.mpmetrics"
         //testInstrumentationRunner "android.test.InstrumentationTestRunner"

         // TODO: turn on lint
         lintOptions {
             abortOnError false
             warningsAsErrors false
             disable "UnusedResources"
         }
     }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'LightStep Tracer AAR'
                url 'http://lightstep.com'
                scm {
                    connection 'https://github.com/lightstep/lightstep-tracer-java.git'
                    developerConnection 'https://github.com/lightstep/lightstep-tracer-java.git'
                    url 'https://github.com/lightstep/lightstep-tracer-java.git'
                }
            }
        }
    }
}

// Defines the repositories need for dependencies below
repositories {
    jcenter()
}

// Dependencies to build this JAR archive
dependencies {
    compile 'org.apache.thrift:libthrift:0.9.2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.7.3'
    compile 'org.json:json:20160212'

    // TODO: this doesn't seem to be what is actually desired
    compile files('../jre/build/libs/lightstep-tracer-jre-0.1.1.jar')
}

// Bintray configuration so we can publish publically.  Requires the environment
// variables below be set.
// https://github.com/bintray/gradle-bintray-plugin
bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    configurations = ['archives']
    pkg {
        repo = 'generic'
        name = 'lightstep-tracer-android'
        userOrg = 'lightstep'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/lightstep/lightstep-tracer-java.git'
        publicDownloadNumbers = true
        version {
            name = current_version
            released  = new Date()
        }
    }
}



task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    println "${source.files.name}"
    println "${android.sourceSets.main.java.srcDirs}"
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}
